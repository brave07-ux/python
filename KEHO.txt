class Employee:
    def employee_details(self,name,employee_id,department,salary):
        self.name=name
        self.employee_id=employee_id
        self.department=department
        self.salary=salary

    def update_salary(self,department,new_salary):
       if self.department == department:
           self.salary = new_salary

employee1 = Employee()
employee2 = Employee()
employee3 = Employee()

employee1.employee_details("aman",1001,"hr",20000)
employee2.employee_details("sneha",1002,"it",30000)
employee3.employee_details("neha",1003,"finance",40000)

print("employee details before salary update")
for employee in [employee1,employee2,employee3]:
    print("Employee ID:",employee.employee_id)
    print("Name:",employee.name)
    print("Department:",employee.department)
    print("Salary:",employee.salary)
    print()

department = input("enter the department name salary needs to be updated:")
new_salary =input("enter the salary to be updated:")

for employee in [employee1,employee2,employee3]:
    employee.update_salary(department,new_salary)
print()
print("employee details after salary update")
for employee in [employee1,employee2,employee3]:
    print("Employee ID:",employee.employee_id)
    print("Name:",employee.name)
    print("Department:",employee.department)
    print("Salary:",employee.salary)
    print()





def Fib(n):
    if(n==0):
        return 0
    elif(n==1):
        return 1
    else:
        return(Fib(n-1)+Fib(n-2))

N =int(input("enter the number of terms"))
if(N<=0):
    print("enter the positive value")
else:
    print("fibonacci sequence")
    for i in range(0,N):
          print(Fib(i))






import math
num1 =int(input("enter the first number"))
num2 =int(input("enter the second number"))

result=math.gcd(num1,num2)
print("the gcd of",num1,"and",num2,"=",result)






def dectobin(decimal):
    binary=bin(decimal)
    print("binary equivalent of decimal",binary)

def dectooct(decimal):
    octal=oct(decimal)
    print("octal eqivalent of decimal",octal)

def dectohex(decimal):
    hexa=hex(decimal)
    print("hexa eqivalent of decimal",hexa)

decimal=int(input("enter the decimal number"))
dectobin(decimal)
dectooct(decimal)
dectohex(decimal)








roman_dict ={"I":1,"V":5,"X":10,"L":50,"C":100,"D":500,"M":1000}
roman_number =input("enter the roman number")
result=0
prev_value=0

for char in roman_number[::-1]:
    curr_value=roman_dict[char]
    if curr_value>=prev_value:
        result=result+curr_value
    else:
        result=result-curr_value
    prev_value=curr_value
print("the integer value",roman_number,"is",result)   








num =int(input("enter the number"))
digit =int(input("enter the digit"))
temp=num
count=0
res=0

while(num>0):
    rem= num%10
    if(rem==digit):
        count=count+1
    rev =res*10+rem
    num =num//10
print("the digit",digit,"has occured",count,"times in",temp)        
        






class PalindromeCheker:
    def Palindrome(self,input_value):
        pass
class StringPal(PalindromeCheker):
    def Palindrome(self,input_value):
        return input_value == input_value[::-1]
class IntegerPal(PalindromeCheker):
    def Palindrome(self,input_value):
        input_str==str(input_value)
        return input_str==input_str[::-1]

input_str=input("enter the string value:")
String_cheker= StringPal()

if String_cheker.Palindrome(input_str):
    print("the input string is palindrome:")
else:
    print("the input string is not a palindrome:")
print()

input_num=int(input("enter the integer:"))
integer_cheker=IntegerPal()

if integer_cheker.Palindrome(input_num):
    print("the input integer is palindrome:")
else:
    print("the input integer is not palindrome:")
   
              



letter =ord("A")
for i in range(1,6):
    for j in range(1,i+1): 
        print(chr(letter),end=" ")
        letter =letter+1
    print()    


roman_dict ={"I":1,"V":5,"X":10,"L":50,"C":100,"D":500,"M":1000}
roman_number =input("enter the roman number")
result=0
prev_value=0

for char in roman_number[::-1]:
    curr_value=roman_dict[char]
    if curr_value>=prev_value:
        result=result+curr_value
    else:
        result=result-curr_value
    prev_value=curr_value
print("the integer value",roman_number,"is",result)         
    
     
         

list =input("enter the list of element separated by space:")
list =list.split()
N =len(list)
print("list before swapping the element:",list)

index1=int(input("enter the first element to swap"))
index2=int(input("enter the second element to swap"))

if(0<=index1<N and 0<=index2<N):
           temp=list[index1]
           list[index1]=list[index2]
           list[index2]=temp
           print("list after swapping list",list)
else:
    print("enter the valid input")











import os
import shutil
input_folder=input("enter the folder name:")
if not os.path.exists(input_folder):
    print("error:folder doesnot exist...")
else:
    shutil.make_archive('output_folder','ZIP',input_folder)
    print("ZIP created sucessfully")









Sentence = input("enter the sentence:")

digit_count=0
upper_count=0
lower_count=0

words =Sentence.split()
word_count =len(words)

for letter in Sentence:
    if letter.isdigit():
        digit_count =digit_count+1

    elif letter.isupper():
        upper_count =upper_count+1

    elif letter.islower():
        lower_count =lower_count+1

print("no of words =",word_count)
print("no of digit =",digit_count)
print("no of uppercase =",upper_count)
print("no of lowercase =",lower_count)    
        

